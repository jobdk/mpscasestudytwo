package PlantUML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Cardinality;
  private ConceptPresentation props_ClassEntity;
  private ConceptPresentation props_ClassEntityReference;
  private ConceptPresentation props_Constructor;
  private ConceptPresentation props_Dependency;
  private ConceptPresentation props_Element;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_EntityElement;
  private ConceptPresentation props_EntityReference;
  private ConceptPresentation props_EnumEntity;
  private ConceptPresentation props_EnumEntityMember;
  private ConceptPresentation props_EnumEntityReference;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_Method;
  private ConceptPresentation props_NonAccessModifierEntityElement;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_PlantUML;
  private ConceptPresentation props_Variable;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Cardinality:
        if (props_Cardinality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cardinality = cpb.create();
        }
        return props_Cardinality;
      case LanguageConceptSwitch.ClassEntity:
        if (props_ClassEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClassEntity = cpb.create();
        }
        return props_ClassEntity;
      case LanguageConceptSwitch.ClassEntityReference:
        if (props_ClassEntityReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86e0L, 0x1a5c6983052c86e1L, "classEntity", "", "");
          props_ClassEntityReference = cpb.create();
        }
        return props_ClassEntityReference;
      case LanguageConceptSwitch.Constructor:
        if (props_Constructor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("constructor");
          props_Constructor = cpb.create();
        }
        return props_Constructor;
      case LanguageConceptSwitch.Dependency:
        if (props_Dependency == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dependency");
          props_Dependency = cpb.create();
        }
        return props_Dependency;
      case LanguageConceptSwitch.Element:
        if (props_Element == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Element = cpb.create();
        }
        return props_Element;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.EntityElement:
        if (props_EntityElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EntityElement = cpb.create();
        }
        return props_EntityElement;
      case LanguageConceptSwitch.EntityReference:
        if (props_EntityReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EntityReference = cpb.create();
        }
        return props_EntityReference;
      case LanguageConceptSwitch.EnumEntity:
        if (props_EnumEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumEntity = cpb.create();
        }
        return props_EnumEntity;
      case LanguageConceptSwitch.EnumEntityMember:
        if (props_EnumEntityMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumEntityMember = cpb.create();
        }
        return props_EnumEntityMember;
      case LanguageConceptSwitch.EnumEntityReference:
        if (props_EnumEntityReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86ddL, 0x1a5c6983052c86deL, "enumEntity", "", "");
          props_EnumEntityReference = cpb.create();
        }
        return props_EnumEntityReference;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.Method:
        if (props_Method == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Method = cpb.create();
        }
        return props_Method;
      case LanguageConceptSwitch.NonAccessModifierEntityElement:
        if (props_NonAccessModifierEntityElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NonAccessModifierEntityElement = cpb.create();
        }
        return props_NonAccessModifierEntityElement;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.PlantUML:
        if (props_PlantUML == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("plant uml");
          props_PlantUML = cpb.create();
        }
        return props_PlantUML;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Variable = cpb.create();
        }
        return props_Variable;
    }
    return null;
  }
}
