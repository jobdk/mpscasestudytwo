package PlantUML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Cardinality_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ClassEntity_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ClassEntityReference_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Constructor_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Dependency_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new EnumEntity_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EnumEntityMember_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new EnumEntityReference_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Field_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Method_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new PlantUML_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("PlantUML.editor.NonAccessModifierEntityElementEditor".equals(editorComponentId)) {
      return Collections.singletonList(new NonAccessModifierEntityElementEditor());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    if ("PlantUML.editor.VariableEditor".equals(editorComponentId)) {
      return Collections.singletonList(new VariableEditor());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "PlantUML.editor.ToggleBodyTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ToggleBodyTransformationMenu()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (menuId.getFqName()) {
            case "PlantUML.editor.CardinalityTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new CardinalityTransformationMenu()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (menuId.getFqName()) {
            case "PlantUML.editor.DependencyLabelTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new DependencyLabelTransformationMenu()});
            default:
          }
        }
        break;
      case 3:
        if (true) {
          switch (menuId.getFqName()) {
            case "PlantUML.editor.EnumEntity_ToggleBodyTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new EnumEntity_ToggleBodyTransformationMenu()});
            default:
          }
        }
        break;
      case 4:
        if (true) {
          switch (menuId.getFqName()) {
            case "PlantUML.editor.NonAccessModifierTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new NonAccessModifierTransformationMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ClassEntity_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ClassEntityReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new EntityElement_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new EnumEntityReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052acac7L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43aaL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86e0L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43d3L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052acab9L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43abL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c69830524b732L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86ddL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43bbL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43bcL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051cdf2eL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a3cc2L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052038d9L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051cdf1cL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43aaL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052acab9L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86e3L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43abL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052038d9L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43aaL), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86e0L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983051a43d4L), MetaIdFactory.conceptId(0x2ff0a41f288043b3L, 0xa889f912d65b3892L, 0x1a5c6983052c86ddL)).seal();
}
